name: Build and Deploy Backend to EKS

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Backend Image to ECR
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}
      SKIP_BUILD: ${{ steps.check_backend_changes.outputs.SKIP_BUILD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # üîπ Verifica se houve mudan√ßas no backend
      - name: Check for changes in backend-application
        id: check_backend_changes
        run: |
          if git diff --quiet HEAD^ HEAD -- backend-application/; then
            echo "No changes in backend-application"
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
            echo "SKIP_BUILD=true" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in backend-application"
            echo "SKIP_BUILD=false" >> $GITHUB_ENV
            echo "SKIP_BUILD=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS Credentials
        if: env.SKIP_BUILD == 'false'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        if: env.SKIP_BUILD == 'false'
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_BE }}

      - name: Generate image tag
        if: env.SKIP_BUILD == 'false'
        id: set_image_tag
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated IMAGE_TAG: $IMAGE_TAG"

      - name: Build Backend Docker Image
        if: env.SKIP_BUILD == 'false'
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY_BE }}:$IMAGE_TAG ./backend-application

      - name: Push Backend Docker Image to ECR
        if: env.SKIP_BUILD == 'false'
        run: |
          docker push ${{ secrets.ECR_REGISTRY_BE }}:$IMAGE_TAG

  deploy:
    name: Deploy Backend to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      SKIP_BUILD: ${{ needs.build-and-push.outputs.SKIP_BUILD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Check for changes in Helm Charts
        id: check_helm_changes
        run: |
          if git diff --quiet HEAD^ HEAD -- helm-charts/; then
            echo "No changes in Helm Charts"
            echo "SKIP_DEPLOY=true" >> $GITHUB_ENV
          else
            echo "Changes detected in Helm Charts"
            echo "SKIP_DEPLOY=false" >> $GITHUB_ENV
          fi

      - name: Check if Helm Release Exists
        id: check_helm_release
        run: |
          RELEASE_NAME="backend"
          NAMESPACE="default"

          if helm status $RELEASE_NAME -n $NAMESPACE > /dev/null 2>&1; then
            echo "HELM_RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "HELM_RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      # üîπ Obt√©m a √∫ltima imagem do ECR se n√£o houve build
      - name: Load IMAGE_TAG
        run: |
          REPO_NAME="backend"
          AWS_REGION="${{ secrets.AWS_REGION }}"

          if [ "$SKIP_BUILD" == "false" ]; then
            IMAGE_TAG=${{ needs.build-and-push.outputs.IMAGE_TAG }}
            echo "Usando a IMAGE_TAG do novo build: $IMAGE_TAG"
          else
            echo "SKIP_BUILD=true. Obtendo √∫ltima tag do Amazon ECR..."
            
            IMAGE_TAG=$(aws ecr describe-images --repository-name $REPO_NAME \
              --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
              --output text --region $AWS_REGION)

            if [ "$IMAGE_TAG" == "None" ] || [ -z "$IMAGE_TAG" ]; then
              echo "Erro: Nenhuma imagem encontrada no ECR para '$REPO_NAME'. Abortando..."
              exit 1
            fi

            echo "Usando √∫ltima IMAGE_TAG do ECR: $IMAGE_TAG"
          fi

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # üîπ Executa o deploy se houver mudan√ßas no c√≥digo, Helm Chart ou se a release n√£o existir
      - name: Deploy Backend to EKS using Helm
        if: env.SKIP_DEPLOY == 'false' || env.SKIP_BUILD == 'false' || env.HELM_RELEASE_EXISTS == 'false'
        run: |
          RELEASE_NAME="backend"
          NAMESPACE="default"

          echo "Verificando release Helm..."
          echo "HELM_RELEASE_EXISTS=${HELM_RELEASE_EXISTS}"
          echo "Deploying IMAGE_TAG: $IMAGE_TAG"

          if [ "$HELM_RELEASE_EXISTS" = "true" ]; then
            echo "A release '$RELEASE_NAME' j√° existe. Aplicando upgrade..."
            helm upgrade $RELEASE_NAME ./helm-charts/nginx-chart \
              --namespace $NAMESPACE \
              --set image.repository=${{ secrets.ECR_REGISTRY_BE }} \
              --set image.tag=$IMAGE_TAG
          else
            echo "A release '$RELEASE_NAME' n√£o existe. Instalando..."
            helm install $RELEASE_NAME ./helm-charts/nginx-chart \
              --namespace $NAMESPACE \
              --set image.repository=${{ secrets.ECR_REGISTRY_BE }} \
              --set image.tag=$IMAGE_TAG
          fi

name: Build and Deploy Backend to EKS

on:
  push:
    branches:
      - main  # Roda quando algo for alterado na branch main

jobs:
  build-and-push:
    name: Build and Push Backend Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Garantir que temos hist칩rico para diff

      # 游댳 Verificar se houve mudan칞as no backend-application
      - name: Check for changes in backend-application
        id: check_backend_changes
        run: |
          if git diff --quiet HEAD^ HEAD -- backend-application/; then
            echo "No changes in backend-application"
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          else
            echo "Changes detected in backend-application"
            echo "SKIP_BUILD=false" >> $GITHUB_ENV
          fi

      # 游댳 Autentica칞칚o na AWS (somente se for necess치rio build)
      - name: Configure AWS Credentials
        if: env.SKIP_BUILD == 'false'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login no Amazon ECR (somente se for necess치rio build)
      - name: Login to Amazon ECR
        if: env.SKIP_BUILD == 'false'
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_BE }}

      # 游댳 Build da Imagem Docker do Backend
      - name: Build Backend Docker Image
        if: env.SKIP_BUILD == 'false'
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          docker build -t ${{ secrets.ECR_REGISTRY_BE }}:$IMAGE_TAG ./backend-application
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 游댳 Push da Imagem para o ECR do Backend
      - name: Push Backend Docker Image to ECR
        if: env.SKIP_BUILD == 'false'
        run: |
          docker push ${{ secrets.ECR_REGISTRY_BE }}:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy Backend to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push  # S칩 executa ap칩s a etapa de build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Garantir que temos hist칩rico para diff

      # 游댳 Verificar se houve mudan칞as no Helm Chart
      - name: Check for changes in Helm Charts
        id: check_helm_changes
        run: |
          if git diff --quiet HEAD^ HEAD -- helm-charts/; then
            echo "No changes in Helm Charts"
            echo "SKIP_DEPLOY=true" >> $GITHUB_ENV
          else
            echo "Changes detected in Helm Charts"
            echo "SKIP_DEPLOY=false" >> $GITHUB_ENV
          fi

      # 游댳 Autentica칞칚o na AWS (se necess치rio deploy)
      - name: Configure AWS Credentials
        if: env.SKIP_DEPLOY == 'false'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 游댳 Configurar acesso ao cluster EKS (se necess치rio deploy)
      - name: Configure kubectl
        if: env.SKIP_DEPLOY == 'false'
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # 游댳 Deploy para o Kubernetes via Helm (se necess치rio)
      - name: Deploy Backend to EKS using Helm
        if: env.SKIP_DEPLOY == 'false'
        run: |
          helm upgrade --install backend ./helm-charts/nginx-chart \
            --namespace default \
            --set image.repository=${{ secrets.ECR_REGISTRY_BE }} \
            --set image.tag=${{ env.IMAGE_TAG }}
